'*':
  'keymaps':
    'prefix': 'keymaps'
    'body': """
    alt-m alt-,
            添加/取消书签
    alt-m alt-l
            列出所有书签
    alt-m alt-m
            跳跃到下一个书签
    alt-m alt-n
            跳跃到上一个书签
    alt-m alt-.
            清除所有书签

    ctrl-k ctrl-left/ctrl-right/ctrl-n
            分屏跳转
    ctrl-tab
            tab跳转
    ctrl-p
            文件跳转
            行号跳转

    ctrl-right
            以单词为单位，光标向  后  跳跃
    ctrl-left
            以单词为单位，光标向  前  跳跃
    alt-h
            删除一个单词
    ctrl-shift-left/right
            选中一个单词


    alt-right
            光标跳跃到   行尾
    alt-left
            光标跳跃到   行首
    ctrl-m
            光标跳跃到   匹配的括号/html标签

    ctrl-l
            选中一行

    ctrl-alt-b
            代码格式化
    ctrl-k + ctrl-u
            选中的单词大写化
    ctrl-k + ctrl-l
            选中的单词小写化

    ctrl-\
            显示或隐藏目录树
    alt-\
            聚焦目录树
    i
            忽略目录树中gitignore的文件

    ctrl-shift-/
            显示/隐藏项目树
    alt-/
            聚焦项目树
    """

# react
'.source.js':
  'React ES6 Component':
    'prefix': 'rc'
    'body': """
    import React, { PropTypes } from 'react';

    export default class ${1:MyComponent} extends React.Component {
        render() {
            return (
                <div>

                </div>
            )
        }
    }

    ${1}.propTypes = {

    };
    """

  'React ES6 Component with Constructor':
    'prefix': 'rcc'
    'body': """
    import React, { PropTypes } from 'react';

    export default class ${1:MyComponent} extends React.Component {
        constructor(props) {
            super(props);
        }

        render() {
            return (
                <div>

                </div>
            )
        }
    }

    ${1}.propTypes = {

    };
    """

  'React ES6 Constructor':
    'prefix': 'rconst'
    'body': """
    constructor(props) {
        super(props);
        ${1}
    }
    """

  'React ES6 Functional Component':
    'prefix': 'rfunc'
    'body': """
    import React, { PropTypes } from 'react';

    export default ${1} = (props) => {
        return (
            <div>

            </div>
        );
    }

    ${1}.propTypes = {

    };
    """

  'React ES6 bind method to this':
    'prefix': 'rbm',
    'body': """
    this.${1} = this.${1}.bind(this);
    """

  'React ES6 props definition':
    'prefix': 'rpd',
    'body': """
    ${1}.propTypes = {
        ${2}
    };
    """

  # PropType string
  'React PropType string':
    'prefix': 'rpstr',
    'body': "${1:myProp}: PropTypes.string,"
  'React PropType string required':
    'prefix': 'rpstrr',
    'body': "${1:myProp}: PropTypes.string.isRequired,"

  # PropType number
  'React PropType number':
    'prefix': 'rpn',
    'body': "${1:myProp}: PropTypes.number,"
  'React PropType number required':
    'prefix': 'rpnr',
    'body': "${1:myProp}: PropTypes.number.isRequired,"

  # PropType object
  'React PropType object':
    'prefix': 'rpo',
    'body': "${1:myProp}: PropTypes.object,"
  'React PropType object required':
    'prefix': 'rpor',
    'body': "${1:myProp}: PropTypes.object.isRequired,"

  # PropType array
  'React PropType array':
    'prefix': 'rpa',
    'body': "${1:myProp}: PropTypes.array,"
  'React PropType array required':
    'prefix': 'rpar',
    'body': "${1:myProp}: PropTypes.array.isRequired,"

  # PropType bool
  'React PropType bool':
    'prefix': 'rpb',
    'body': "${1:myProp}: PropTypes.bool,"
  'React PropType bool required':
    'prefix': 'rpbr',
    'body': "${1:myProp}: PropTypes.bool.isRequired,"

  # PropType element
  'React PropType element':
    'prefix': 'rpe',
    'body': "${1:myProp}: PropTypes.element,"
  'React PropType element required':
    'prefix': 'rper',
    'body': "${1:myProp}: PropTypes.element.isRequired,"

  # PropType function
  'React PropType function':
    'prefix': 'rpf',
    'body': "${1:myProp}: PropTypes.func,"
  'React PropType function required':
    'prefix': 'rpfr',
    'body': "${1:myProp}: PropTypes.func.isRequired,"

  # PropType shape
  'React PropType shape':
    'prefix': 'rps',
    'body': """
    ${1:myProp}: PropTypes.shape({
        ${2}
    }),
    """
  'React PropType shape required':
    'prefix': 'rpsr',
    'body': """
    ${1:myProp}: PropTypes.shape({
        ${2}
    }).isRequired,
    """
